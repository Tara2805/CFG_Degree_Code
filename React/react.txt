React
React is a JS Library (a collection of helpful code and routines bundled together)
It can be added to our websites in a scalable way - we can either a little bit of React (e.g. here and there in our HTML site) or make the entire website be React-based instead (discarding the HTML and CSS stack entirely to a degree)
React is all about creating and using ‘components’ - self contained elements that we manually create through code
For example, we can create a new button ourselves that fits our vision of what it should be (e.g. perhaps we need some specific design). React allows us to contain all of this code into one ‘button’ component (like a object) that can be deployed over and over again (making it incredibly easy for us to be consistent).
React’s second benefit is its virtual DOM. Effectively it keeps a 2nd copy of our DOM which is updated when we make changes, and publishes / pushes this changes into the real DOM when its ready. The benefit of this is speed - instead of reloading a page 5 times, React will often batch new changes itself so the entirety of the real DOM doesn’t have to reload or change

Working with React
Using your console, navigate to a new folder location - we’ll use a new place and create a new project there
In this location run the command: npx create-react-app {your project name here}
This will create a new app with the name you specified above! Note that we can always add React partially to our normal websites - but for the sake of time + learning, we’re diving deep into making a full-React app. Feel free to practice and apply what we learn to last weeks HTML + CSS website stack though!
The process takes several minutes - once its created, cd into the folder and run it via npm start!

What is ReactDOM
ReactDOM is a package in React that provides DOM-specific methods that can be used at the top level of a web app to enable an efficient way of managing DOM elements of the web page. ReactDOM provides the developers with an API containing the various methods to manipulate DOM

In a typical React application, the <App /> component is the root component, and it's usually rendered into the DOM by ReactDOM. Removing <App /> from the ReactDOM render function would mean that the root component of the application is no longer being rendered into the DOM.
If you remove <App /> from the ReactDOM render function, and assuming <App /> is the main entry point of your application, nothing will be rendered to the DOM. This means that your application's UI won't be displayed in the browser window.
If you think back to the <body> tag, it's the root element of an HTML document, and it's where all the visible content of the web page resides. When ReactDOM renders the <App /> component into the DOM, it typically replaces the content inside the <body> tag with the content generated by React components. If you remove <App /> from the render function, the content generated by React won't be inserted into the <body> tag, leaving the page essentially blank.

In the context of a typical React application, the App.js file usually contains the main component of the application, often called App. This component serves as the root component that holds other components of the application. Its structure might look something like this:
javascript
Copy code
import React from 'react';
import './App.css'; // Importing CSS for styling

function App() {
 return (
 <div className="App">
 {/* Content of the application */}
 </div>
 );
}

export default App;

Here's what happens with some changes:
Changing Content: You can modify the JSX inside the return statement to change what the App component renders. This can include adding more components, changing text, or incorporating dynamic data.
Changing Styling: The App.css file, as imported in App.js, contains styles specifically for the App component. You can modify this CSS file to change the visual appearance of the App component and its children.
Adding Functionality: You can add state, props, or lifecycle methods to the App component to introduce more functionality to your application.
Removing or Adding Components: You can import other components into App.js and use them within the App component. This allows you to compose your application from multiple smaller components.
Refactoring: You can refactor the structure of your App component or split it into smaller components for better organization and reusability.
Changing things in App.js directly impacts the structure and behavior of the root component of your React application, which can have significant effects on the overall functionality and appearance of your application.

Add to you App.js
At the top of the file - import Button from './component/Button'
mid file, Call component - import Button from './component/Button' (edited) 


It effectively is what we learnt during our JavaScript course - we simply write a set of instructions that the component must follow depending on the event
● For example, we can create a onClick function and assign it to the button component
● Once assigned, we can tell the component that every time it’s clicked, it must follow whatever is within onClick
● A primary difference to JS is that these ‘behavioural’ functions are normally stored within the component file as well - effectively centralising a lot of code together (the component file is already .js!

Components can pass pieces of information to each other - called props
● It’s extremely similar to how we call functions in Python and pass values to them for use
● We can pass anything, and assign any ID / property name to the lower component - for
Example: nameDoesNotMatter = “Prop ‘nameDoesNotMatter’ value”
● Note that all components receive a prop object anyway! Adding values to it in the parent component above just means that the object actually has a propNameID : propValue this timeIn App.js, a new prop identifier can be added to the component (or wherever else you’ve placed <Button />
● Inside the Button component, props (which is always extracted, even if it's not inside the brackets) can be unpacked and referred to - as its an object, using the dot notation to access buttonText is all that’s needed
● The {} are used in order to not make JSX complain / ensure it doesn’t think this is just some random word

Components can be customised both in their appearance as well as
their behaviour

● Information can be shared between components via props - data that’s passed linearly (usually downwards) in a hierarchical system

● As an aside, always make sure to keep googling! In the creation of these slides, there was a lot of frustration dealing with props. Always make sure to make plenty of use of Google + React docs


Helpful links
https://react.dev/learn
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction

Lifestyle Methods
There are three categories of lifecycle methods: mounting, updating, and unmounting. A component “mounts” when it renders for the first time. This is when mounting lifecycle methods get called. The first time that a component instance renders, it does not update.

Routing
● First we’ll want to run the command npm install react-router-dom (or the yarn equivalent); this is to install the library first!
● Second: in your index.js, import these. Consider throughout - what does each one do, what is it responsible for, why? Although this code is guided, make sure to try to understand / treat this as a pair programming session!
